package fi.opendemocracy.web.ui.dialogs;

import java.util.Date;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.Sizeable;
import com.vaadin.ui.Button;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.RichTextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;

import fi.opendemocracy.domain.Category;
import fi.opendemocracy.domain.Expert;
import fi.opendemocracy.domain.ODUser;
import fi.opendemocracy.web.ThemeConstants;

public class ModalCategoryForm extends Window   {

	private VerticalLayout mainLayout;
	private HorizontalLayout buttonLayout;
	private Button cancelButton;
	private Button saveButton;
	private VerticalLayout fieldLayout;
	private TextField nameField;
	private RichTextArea descriptionField;

	private Category newCategory;
	
	public ModalCategoryForm() {
		addComponent(buildMainLayout());
		setCaption("Create category");
		setIcon(ThemeConstants.TAB_ICON_CATEGORIES);
	}

	public void setName(String name){
		
	}
	
	public Object getId(){
		if(newCategory != null){
			return newCategory.getId();			
		}
		return null;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setSizeFull();
		// top-level component properties
		setModal(true);
		setWidth(400, Sizeable.UNITS_PIXELS);

		// fieldLayout
		fieldLayout = buildFieldLayout();
		mainLayout.addComponent(fieldLayout);

		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		addListeners();
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildFieldLayout() {
		// common part: create layout
		fieldLayout = new VerticalLayout();
		fieldLayout.setWidth("100.0%");
		fieldLayout.setHeight("100.0%");
		fieldLayout.setImmediate(false);
		fieldLayout.setSpacing(true);

		// nameField
		nameField = new TextField();
		nameField.setWidth("100%");
		nameField.setHeight("-1px");
		nameField.setCaption("Name");
		nameField.setImmediate(false);
		fieldLayout.addComponent(nameField);

		// descriptionField
		descriptionField = new RichTextArea();
		descriptionField.setWidth("100%");
		descriptionField.setHeight("-1px");
		descriptionField.setCaption("Description");
		descriptionField.setImmediate(false);
		fieldLayout.addComponent(descriptionField);
		fieldLayout.setExpandRatio(descriptionField, 1.0f);
		return fieldLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setImmediate(false);
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);

		// saveButton
		saveButton = new Button();
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		saveButton.setCaption("Create");
		saveButton.setStyleName("primary");
		saveButton.setImmediate(true);
		buttonLayout.addComponent(saveButton);

		// cancelButton
		cancelButton = new Button();
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		buttonLayout.addComponent(cancelButton);

		return buttonLayout;
	}
	
	private void addListeners(){
		saveButton.addListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				//TODO: Update if expertise exists
				newCategory = new Category();
				newCategory.setName(nameField.getValue().toString());
				newCategory.setDescription(descriptionField.getValue().toString());
				newCategory.setTs(new Date());
				
				//TODO: Cleanup
				newCategory.persist();
				
				descriptionField.setValue("");
				nameField.setValue("");
				ModalCategoryForm.this.close();
			}
		});
		cancelButton.addListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				descriptionField.setValue("");
				nameField.setValue("");
				ModalCategoryForm.this.close();
			}
		});
	}
	
	@Override
	public void attach() {
		super.attach();
	}

}
