package fi.opendemocracy.web.ui;

import com.vaadin.Application;
import com.vaadin.Application.UserChangeEvent;
import com.vaadin.Application.UserChangeListener;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.spring.roo.addon.annotations.RooVaadinVisuallyComposableEntityForm;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import fi.opendemocracy.domain.ODUser;
import fi.opendemocracy.web.EntityEditor;
import fi.opendemocracy.web.EntityProviderUtil;
import fi.opendemocracy.web.TabNavigator;
import fi.opendemocracy.web.ThemeConstants;

/**
 * Form for editing an entity. The layout of this form can be edited with the
 * Vaadin Visual Editor.
 * 
 * Fields are automatically bound to container data sources and item properties
 * based on their names (propertyId + "Field") in the aspect. Implementing
 * methods with the same name as used in the aspect allows "overriding"
 * functionality as such methods replace those from the aspect.
 */
@RooVaadinVisuallyComposableEntityForm(formBackingObject = fi.opendemocracy.domain.ODUser.class)
public class ODUserForm extends CustomComponent implements EntityEditor {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Panel scrollPanel;
	@AutoGenerated
	private VerticalLayout scrollContent;
	@AutoGenerated
	private HorizontalLayout buttonLayout;
	@AutoGenerated
	private Button cancelButton;
	@AutoGenerated
	private Button saveButton;
	@AutoGenerated
	private Label errorMessageLabel;
	@AutoGenerated
	private VerticalLayout fieldLayout;
	@AutoGenerated
	private TextField lastNameField;
	@AutoGenerated
	private TextField firstNameField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private TextField emailAddressField;
	@AutoGenerated
	private TextField usernameField;

	private JPAContainer<ODUser> userContainer;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// data item being edited
	private Item item;

	public ODUserForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		userContainer = new JPAContainer<ODUser>(ODUser.class);
		userContainer.setEntityProvider(EntityProviderUtil.get().getEntityProvider(ODUser.class));
		configure();

		setCaption("User profile");
		setIcon(ThemeConstants.TAB_ICON_USER);
		// make saving the form the default action on Enter keypress
		saveButton.setClickShortcut(KeyCode.ENTER);

		// TODO add user code here
	}

	@Override
	public void addSaveActionListener(ClickListener listener) {
		saveButton.addListener(listener);
	}

	@Override
	public void addCancelActionListener(ClickListener listener) {
		cancelButton.addListener(listener);
	}

	@Override
	public void addDeleteActionListener(ClickListener listener) {
	}

	@Override
	public void setSaveAllowed(boolean canSave) {
		saveButton.setVisible(canSave);
		cancelButton.setVisible(canSave);
		saveButton.setEnabled(canSave);
		cancelButton.setEnabled(canSave);

		// do not change the enabled state of the delete button
		fieldLayout.setEnabled(canSave);
	}

	@Override
	public void setDeleteAllowed(boolean canDelete) {
	}

	@Override
	public void setCommitErrorMessage(String message) {
		errorMessageLabel.setVisible(message != null);
		errorMessageLabel.setValue(message);
	}

	@Override
	public void commit() {
		if (getItemDataSource() != null) {
			validateFields();
			setCommitErrorMessage(null);
			commitFields();
		}
	}

	@Override
	public void setItemDataSource(Item item) {
		// TODO implement

		this.item = item;

		setFieldValues(item);
		setCommitErrorMessage(null);
	}

	@Override
	public Item getItemDataSource() {
		return item;
	}

	@Override
	public void focus() {
		Field field = getFirstField();
		if (field != null) {
			field.focus();
		}
	}

	public void applicationUserChanged(UserChangeEvent event) {
		Object user = event.getNewUser();
		if (user != null && user instanceof ODUser) {
			ODUser odUser = (ODUser) user;
			setItemDataSource(userContainer.getItem(odUser.getId()));
//			usernameField.setValue(odUser.getUsername());
//			emailAddressField.setValue(odUser.getEmailAddress());
//			descriptionField.setValue(odUser.getDescription());
//			firstNameField.setValue(odUser.getFirstName());
//			lastNameField.setValue(odUser.getLastName());
		}
	}

	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// scrollPanel
		scrollPanel = buildScrollPanel();
		mainLayout.addComponent(scrollPanel,
				"top:0.0px;right:-2.0px;bottom:-4.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildScrollPanel() {
		// common part: create layout
		scrollPanel = new Panel();
		scrollPanel.setImmediate(false);
		scrollPanel.setWidth("100.0%");
		scrollPanel.setHeight("100.0%");
		
		// scrollContent
		scrollContent = buildScrollContent();
		scrollPanel.setContent(scrollContent);
		
		return scrollPanel;
	}

	@AutoGenerated
	private VerticalLayout buildScrollContent() {
		// common part: create layout
		scrollContent = new VerticalLayout();
		scrollContent.setImmediate(false);
		scrollContent.setWidth("100.0%");
		scrollContent.setHeight("-1px");
		scrollContent.setMargin(true);
		scrollContent.setSpacing(true);
		
		// fieldLayout
		fieldLayout = buildFieldLayout();
		scrollContent.addComponent(fieldLayout);
		
		// errorMessageLabel
		errorMessageLabel = new Label();
		errorMessageLabel.setStyleName("errormessage");
		errorMessageLabel.setImmediate(false);
		errorMessageLabel.setWidth("-1px");
		errorMessageLabel.setHeight("-1px");
		errorMessageLabel.setValue("Label");
		scrollContent.addComponent(errorMessageLabel);
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		scrollContent.addComponent(buttonLayout);
		
		return scrollContent;
	}

	@AutoGenerated
	private VerticalLayout buildFieldLayout() {
		// common part: create layout
		fieldLayout = new VerticalLayout();
		fieldLayout.setImmediate(false);
		fieldLayout.setWidth("100.0%");
		fieldLayout.setHeight("-1px");
		fieldLayout.setMargin(false);
		fieldLayout.setSpacing(true);
		
		// usernameField
		usernameField = new TextField();
		usernameField.setCaption("Username");
		usernameField.setImmediate(true);
		usernameField.setWidth("-1px");
		usernameField.setHeight("-1px");
		usernameField.setSecret(false);
		fieldLayout.addComponent(usernameField);
		
		// emailAddressField
		emailAddressField = new TextField();
		emailAddressField.setCaption("Email Address");
		emailAddressField.setImmediate(true);
		emailAddressField.setWidth("-1px");
		emailAddressField.setHeight("-1px");
		emailAddressField.setSecret(false);
		fieldLayout.addComponent(emailAddressField);
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Description");
		descriptionField.setImmediate(true);
		descriptionField.setWidth("-1px");
		descriptionField.setHeight("-1px");
		descriptionField.setSecret(false);
		fieldLayout.addComponent(descriptionField);
		
		// firstNameField
		firstNameField = new TextField();
		firstNameField.setCaption("First Name");
		firstNameField.setImmediate(true);
		firstNameField.setWidth("-1px");
		firstNameField.setHeight("-1px");
		firstNameField.setSecret(false);
		fieldLayout.addComponent(firstNameField);
		
		// lastNameField
		lastNameField = new TextField();
		lastNameField.setCaption("Last Name");
		lastNameField.setImmediate(true);
		lastNameField.setWidth("-1px");
		lastNameField.setHeight("-1px");
		lastNameField.setSecret(false);
		fieldLayout.addComponent(lastNameField);
		
		return fieldLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		buttonLayout.setSpacing(true);
		
		// saveButton
		saveButton = new Button();
		saveButton.setStyleName("primary");
		saveButton.setCaption("Save");
		saveButton.setImmediate(true);
		saveButton.setWidth("-1px");
		saveButton.setHeight("-1px");
		buttonLayout.addComponent(saveButton);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("-1px");
		cancelButton.setHeight("-1px");
		buttonLayout.addComponent(cancelButton);
		
		return buttonLayout;
	}


}
