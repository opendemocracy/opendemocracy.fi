package fi.opendemocracy.voting.web;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.junit.experimental.categories.Categories;
import org.vaadin.navigator.Navigator;

import com.vaadin.Application;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.MethodProperty;
import com.vaadin.spring.roo.addon.annotations.RooVaadinEntityManagerView;
import com.vaadin.spring.roo.addon.annotations.RooVaadinEntityView;
import com.vaadin.terminal.Sizeable;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

import fi.opendemocracy.voting.domain.Category;
import fi.opendemocracy.voting.web.ui.CategoryView;
import fi.opendemocracy.voting.web.ui.PropositionView;

/**
 * Entity manager view that by default automatically discovers all entity views
 * (classes with the {@link RooVaadinEntityView} annotation) and lets the user
 * choose one of them to display.
 *
 * An entity view must implement the {@link Navigator.View} interface to be
 * automatically added to the view list. Other views can be registered by
 * calling <code>navigator.addView()</code> and added to the sidebar menu by
 * adding a corresponding {@link SidebarItem} to <code>menuItems</code> and
 * <code>viewList</code>.
 * 
 * This class is designed to be compatible with the Vaadin Visual Editor.
 * 
 * All methods and fields not marked with the {@link AutoGenerated} annotation
 * can be modified freely.
 * 
 * If you are planning to use the visual editor, do not touch the methods marked
 * with the {@link AutoGenerated} annotation - they will be removed and
 * re-generated when saving the class from the visual editor. Instead, add any
 * custom code to methods called from the constructor after the initial view
 * construction.
 * 
 * If you will not use the Vaadin Visual Editor to edit this class, all the
 * {@link AutoGenerated} annotations can be removed.
 */
@RooVaadinEntityManagerView
public class OpenDemocracyVotingEntityManagerView extends CustomComponent {

	//OpenDemocracy layout objects
	private VerticalLayout mainLayout;
	private HorizontalLayout toolbar;
	private TabSheet content;
	private Panel help;
	private Button btnPropositions;
	private Button btnCategories;
	//End OpenDemocracy layout objects
	private VerticalLayout homePage;

    private TabNavigator navigator;
    
    
    public static class HomeView extends VerticalLayout implements TabNavigator.View {
        public HomeView() {
        	setCaption(ThemeConstants.TAB_CAPTION_HOME);
        	setIcon(ThemeConstants.TAB_ICON_HOME);
    		setMargin(true);
    		setSizeFull();
    		addStyleName(Reindeer.LAYOUT_WHITE);
            Label l = new Label(
                    "<h1 class=\"v-label-h1\" style=\"text-align: center;\">Welcome to OpenDemocracy Alpha</h1> Select an option above to begin",
                    Label.CONTENT_XHTML);
            l.setSizeUndefined();
            l.addStyleName(Reindeer.LABEL_SMALL);
            addComponent(l);
            setComponentAlignment(l, Alignment.MIDDLE_CENTER);
        	setReadOnly(true);
        }

        public void init(TabNavigator navigator, Application application) {
            // nothing to do
        }

        public void navigateTo(String requestedDataId) {
            // no subpages
        }

        public String getWarningForNavigatingFrom() {
            return null;
        }
    }
    
    /**
     * Builds the main layout, sets the composition root.
     */
    public OpenDemocracyVotingEntityManagerView() {
        setSizeFull();

        // build the layout
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // layout and style adjustments
        mainLayout.addStyleName("main");
        mainLayout.addStyleName(Reindeer.TABSHEET_BORDERLESS);
        
        addListeners();
    }
	
    //Create page header toolbar
	private HorizontalLayout buildToolbar() {
		//Create layout
		toolbar = new HorizontalLayout();
		//Toolbar properties
		toolbar.setMargin(true);
		toolbar.setSpacing(true);
		toolbar.setStyleName("toolbar");
		toolbar.setWidth("100%");
		toolbar.setHeight(90, Sizeable.UNITS_PIXELS);
		
		//Toolbar buttons
		btnPropositions = new Button("Propositions");
		btnCategories = new Button("Categories");
		btnPropositions.setIcon(ThemeConstants.TOOLBAR_ICON_PROPOSITION);
		btnCategories.setIcon(ThemeConstants.TOOLBAR_ICON_CATEGORIES);

		//TODO: Listeners
		//proposition.addListener((ClickListener) app);

		toolbar.addComponent(btnPropositions);
		toolbar.addComponent(btnCategories);
		
		//Logo
		Embedded logo = new Embedded("", ThemeConstants.LOGO);
		toolbar.addComponent(logo);
		toolbar.setComponentAlignment(logo, Alignment.MIDDLE_RIGHT);
		toolbar.setExpandRatio(logo, 1.0f);

		return toolbar;
	}
	
    private VerticalLayout buildMainLayout() {
        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setWidth("100.0%");
        mainLayout.setHeight("100.0%");

        //Add content
        mainLayout.addComponent(buildToolbar());
        mainLayout.addComponent(buildNavigator());
        
        //mainLayout.addComponent(buildContent());
        mainLayout.setExpandRatio(navigator, 1.0f);
              
        return mainLayout;
    }
    private TabNavigator buildNavigator(){
        navigator = new TabNavigator();
        navigator.setSizeFull();
        navigator.setImmediate(false);
        navigator.addView("home", HomeView.class, true);
    	navigator.addView("category", CategoryView.class);
    	navigator.addView("proposition", PropositionView.class);
    	return navigator;
    }
        
    private void addListeners(){
    	btnCategories.addListener(new Button.ClickListener() {
            public void buttonClick(ClickEvent event) {
            	navigator.navigateTo("category");
            }
        });
    	btnPropositions.addListener(new Button.ClickListener() {
            public void buttonClick(ClickEvent event) {
            	navigator.navigateTo("proposition");
            }
        });
    }
    
    //Create tab or set selected if exists
    private MainTab openTab(Class<? extends AbstractEntityView> contentClass, String caption, ThemeResource icon){
    	Tab t;
    	
    	//Check if exists    	
    	for (Iterator<Component> it = content.getComponentIterator();it.hasNext();){
			t = content.getTab(it.next());
			if(t.getCaption().equals(caption)){
				content.setSelectedTab(t.getComponent());
				return (MainTab)t.getComponent();
			}
		}
    	//Create component
    	Component c;
    	
    	try {
			c = contentClass.newInstance();
		} catch (InstantiationException e) {
			// TODO: Proper exception handling
			return null;
		} catch (IllegalAccessException e) {
			// TODO: Proper exception handling
			return null;
		}
		((AbstractEntityView<?>) c).refresh();
		//Fill tab with contents
		MainTab newTab = new MainTab(c);
		t = content.addTab(newTab, caption, icon);
	    content.setSelectedTab(t.getComponent());
	    
	    //Tab properties
	    t.setClosable(true);
	    t.setIcon(icon);
		
	    return newTab;
    }

}